Task 50: MemoryAgentTool - Real mem0 Graph Integration (if Python API exists)

Focus:
This task investigates and integrates mem0's specific Python API for knowledge graph operations, if such distinct APIs exist and are accessible through the mem0.Memory client or a related module.

Research mem0's Python API: Determine if mem0 provides explicit methods for adding/querying graph triplets separately from its general add/search (which might build a graph implicitly).

If dedicated graph APIs exist:

Update Mem0MemorySystem in python/agents/memory_agent/memory.py to use these real mem0 graph methods for add_knowledge_graph_triplets and search_knowledge_graph.

Remove or adapt the placeholder networkx / list-based graph simulation.

If mem0 builds its graph implicitly from general add calls and doesn't offer distinct graph query APIs:

The existing add_messages and add_generic_memory (which use mem0.add()) would be responsible for feeding data that mem0 internally converts into a graph.

The search_knowledge_graph method in Mem0MemorySystem would then either:

Become a no-op or return a message indicating that explicit graph queries are not supported directly, and users should use semantic search.

Or, attempt to simulate a graph-like query using mem0.search() with specially crafted queries if mem0's semantic search can retrieve relationship-like information effectively. This is less ideal.

add_knowledge_graph_triplets might still be useful to explicitly tell mem0 about relationships by adding textual descriptions of those triplets using mem0.add().

For this task, we will assume the following based on typical patterns of advanced memory systems:

Assumption A (Optimistic): mem0's Python client (Mem0Client in our wrapper) might have methods like mem0_client.kg.add_triplet(head, relation, tail, user_id) or mem0_client.kg.query(entity, relation_type, user_id).

Assumption B (More Likely for initial mem0 versions): mem0 builds its knowledge graph implicitly from the text and messages passed to its main add() method by using an internal LLM for entity and relation extraction. Querying this implicit graph might be done through natural language queries to its main search() method, where mem0's LLM understands the query is about relationships. Explicit triplet addition or direct graph traversal APIs might be less common in early versions of such libraries.

Let's proceed with Assumption B as it's often the initial approach for libraries like Mem0 that aim for ease of use. This means our Mem0MemorySystem will rely on mem0's intelligence to build the graph from regular add calls, and graph-like queries will be made through semantic search with natural language.

File Paths and Code Changes:

Modify python/agents/memory_agent/memory.py (Mem0MemorySystem):

The add_knowledge_graph_triplets method will now convert triplets into textual statements and add them using the main self._mem0_client.add() method. This explicitly tells mem0 about these relationships in a way it can process.

The search_knowledge_graph method will formulate a natural language query based on the input entity/relation/target and use self._mem0_client.search(). This relies on mem0's semantic understanding to retrieve relevant information that might imply the queried relationships.

Remove the networkx graph store and its file persistence logic, as we are now relying on mem0's internal graph (built from text) and its persistence.

# python/agents/memory_agent/memory.py
import asyncio
from typing import List, Dict, Any, Optional
import uuid
import json
import logging

logger = logging.getLogger(__name__)

try:
    from mem0 import Memory as Mem0Client
    MEM0_AVAILABLE = True
    logger.info("Mem0MemorySystem: Successfully imported mem0 library.")
except ImportError:
    # ... (Mem0Client placeholder as before) ...
    MEM0_AVAILABLE = False
    class Mem0Client: # type: ignore
        def __init__(self, *args, **kwargs): logger.warning("Mem0Client (Placeholder): mem0 library not installed.")
        async def add(self, data, user_id=None, memory_id=None, metadata=None, **kwargs): return [{"id": memory_id or str(uuid.uuid4()), "status": "placeholder_add_success"}]
        async def search(self, query, user_id=None, limit=5, metadata_filter=None, **kwargs): return [{"id": str(uuid.uuid4()), "text": f"placeholder_search_result_for_{query}", "score": 0.1, "metadata":{}}]
        # ... other placeholder methods
        async def get_all(self, *args, **kwargs): return [] # Ensure get_all returns a list


class Mem0MemorySystem:
    def __init__(self, agent_id: str = "default_agent_zero_user", config_json_str: Optional[str] = None):
        self.agent_id = agent_id
        self.mem0_config = None
        if config_json_str:
            try:
                self.mem0_config = json.loads(config_json_str)
            except json.JSONDecodeError:
                logger.error(f"Mem0MemorySystem: Invalid JSON in MEM0_CONFIG_JSON. Using mem0 defaults.")
        
        if not MEM0_AVAILABLE:
            self._mem0_client = Mem0Client()
        else:
            try:
                self._mem0_client = Mem0Client(config=self.mem0_config)
                logger.info(f"Mem0MemorySystem: Real mem0.Memory client initialized for agent_id: {self.agent_id}")
            except Exception as e:
                logger.error(f"Mem0MemorySystem: Error initializing real mem0.Memory client: {e}. Falling back to placeholder.", exc_info=True)
                self._mem0_client = Mem0Client()
        
        # No more self.graph_store or self.vector_store_file etc. Rely on mem0.

    # ... (add_messages, add_generic_memory, search, update, delete, get, get_all from Task 48,
    #      these methods now directly call self._mem0_client which is the real mem0 client)

    async def add_knowledge_graph_triplets(self, triplets: List[Dict[str, Any]], user_id_override: Optional[str] = None) -> Dict[str, Any]:
        """
        Adds knowledge graph triplets by converting them to textual statements and feeding them to mem0.
        Each triplet: {"head": str, "relation": str, "tail": str, "properties": Optional[Dict]}
        """
        target_user_id = user_id_override or self.agent_id
        logger.info(f"Mem0MemorySystem: Adding {len(triplets)} KG triplets as textual statements for user '{target_user_id}'.")
        
        if not MEM0_AVAILABLE and not isinstance(self._mem0_client, Mem0Client): # If using real mem0 but it failed to init
             return {"status": "error", "message": "Mem0 client not properly initialized.", "triplets_added": 0}

        texts_to_add = []
        metadata_list = []
        for triplet in triplets:
            head = triplet.get("head")
            relation = triplet.get("relation")
            tail = triplet.get("tail")
            props = triplet.get("properties", {})
            if head and relation and tail:
                # Convert triplet to a natural language statement
                statement = f"{head} {relation} {tail}."
                if props:
                    statement += f" Additional details: {json.dumps(props)}."
                texts_to_add.append(statement)
                metadata_list.append({"source_type": "kg_triplet_statement", "triplet_info": triplet, **props})
        
        if not texts_to_add:
            return {"status": "no_valid_triplets", "triplets_added": 0}

        try:
            # Use the batch add capability of mem0 if available, or loop
            # mem0's add method takes `data` which can be a list of strings.
            results = await self._mem0_client.add(data=texts_to_add, user_id=target_user_id, metadata_list=metadata_list) # Assuming add can take metadata_list
            
            added_count = sum(1 for res in results if isinstance(res, dict) and res.get("status") and "success" in res.get("status", "").lower())
            logger.info(f"Mem0MemorySystem: Added {added_count}/{len(texts_to_add)} KG triplet statements to mem0 for user '{target_user_id}'.")
            return {"status": "success" if added_count > 0 else "partial_failure", "triplets_added": added_count}
        except Exception as e:
            logger.error(f"Mem0MemorySystem: Error adding KG triplets as text to mem0: {e}", exc_info=True)
            return {"status": "error", "message": str(e), "triplets_added": 0}


    async def search_knowledge_graph(self, query_entity: Optional[str] = None, 
                                     relation_type: Optional[str] = None, 
                                     target_entity: Optional[str] = None,
                                     user_id_override: Optional[str] = None, limit: int = 10) -> List[Dict[str, Any]]:
        """
        Searches for graph-like information by formulating a natural language query for mem0's semantic search.
        Relies on mem0's ability to understand relational queries over its ingested text.
        """
        target_user_id = user_id_override or self.agent_id
        
        # Construct a natural language query from the graph components
        query_parts = []
        if query_entity: query_parts.append(f"information about '{query_entity}'")
        if relation_type: query_parts.append(f"and its '{relation_type}' relationships")
        if target_entity: query_parts.append(f"specifically concerning '{target_entity}'")
        
        if not query_parts: 
            logger.warning("Mem0MemorySystem: search_knowledge_graph called with no query components.")
            return []
        
        nl_query = " ".join(query_parts)
        if query_entity and relation_type and target_entity: # Specific triplet query
            nl_query = f"Does '{query_entity}' have a '{relation_type}' relationship with '{target_entity}'? Provide details."
        elif query_entity and relation_type:
            nl_query = f"What are the '{relation_type}' relationships for '{query_entity}'?"
        elif query_entity:
            nl_query = f"Tell me about '{query_entity}' and its relationships."
        # Add more sophisticated query formations as needed.

        logger.info(f"Mem0MemorySystem: Searching KG via semantic search for user '{target_user_id}'. NL Query: '{nl_query}'")
        
        try:
            # Use the existing semantic search method
            search_results = await self.search(query=nl_query, user_id_override=target_user_id, limit=limit)
            # The results are text chunks. The LLM (in RAG or agent) would need to interpret these
            # to confirm if they represent the queried graph structure.
            # For now, we return these results as potentially relevant context.
            # We can add a "query_type": "graph_simulation" to metadata if needed.
            interpreted_graph_results = []
            for res in search_results:
                # This is a placeholder interpretation. Real graph extraction from text is complex.
                interpreted_graph_results.append({
                    "retrieved_text": res.get("text"),
                    "relevance_score": res.get("score"),
                    "source_metadata": res.get("metadata"),
                    "interpretation_hint": "This text may contain information about the queried graph relationship."
                })
            return interpreted_graph_results
        except Exception as e:
            logger.error(f"Mem0MemorySystem: Error during search_knowledge_graph (semantic query) via mem0: {e}", exc_info=True)
            return []
    
    # summarize_memory_content from Task 27:
    # It already uses self.search (which now calls mem0) and a separate LLM call.
    # This structure remains valid. If mem0 has a *native* summarization API for memories,
    # that would be integrated in Task 51.
    async def summarize_memory_content(self, memory_id: Optional[str] = None, query_for_context: Optional[str] = None, user_id_override: Optional[str] = None) -> Optional[str]:
        target_user_id = user_id_override or self.agent_id
        logger.info(f"Mem0MemorySystem: Summarizing memory for user '{target_user_id}'. ID: {memory_id}, Query: {query_for_context}")

        if not self._llm_client_for_summary and MEM0_AVAILABLE: # Check if we have an LLM for this task
            # This happens if mem0 is available but OpenAI key wasn't set for summary client
            logger.warning("Mem0MemorySystem: LLM client for summarization not available. Cannot summarize.")
            return "Summarization service not configured for this memory system."
        
        text_to_summarize = ""
        if memory_id:
            # Use mem0's get method
            memory_item_dict = await self._mem0_client.get(memory_id=memory_id, user_id=target_user_id)
            if memory_item_dict:
                text_to_summarize = memory_item_dict.get("text", str(memory_item_dict)) # mem0 'get' might return dict with 'text'
            else:
                return f"Memory with ID '{memory_id}' not found via mem0."
        elif query_for_context:
            relevant_memories = await self.search(query=query_for_context, user_id_override=target_user_id, limit=3)
            if relevant_memories:
                text_to_summarize = "\n\n---\n\n".join([mem.get("text", "") for mem in relevant_memories if mem.get("text")])
            else:
                return "No relevant memories found via mem0 for the query to summarize."
        else:
            return "Either memory_id or query_for_context must be provided for summarization."

        if not text_to_summarize or not text_to_summarize.strip():
            return "No content found to summarize for the given criteria from mem0."

        # ... (rest of LLM call for summarization from Task 27, using self._llm_client_for_summary) ...
        # ... (This part remains the same as it's our custom summarization step)
        # ...
        if not self._llm_client_for_summary: # Should not happen if MEM0_AVAILABLE and init was fine
            return "Summarization LLM not available."
        # ... (LLM call using self._llm_client_for_summary as in Task 27)
        # For brevity, actual LLM call omitted but it's the same as Task 27's implementation.
        # This assumes we still want to do summarization with our own LLM call even if mem0 handles other LLM tasks.
        # If mem0 has a native `.summarize(memory_id)` type call, Task 51 would implement that.
        return f"Conceptual summary for: {text_to_summarize[:100]}..." # Placeholder for brevity


Verify python/tools/memory_agent_tool.py:

The tool's methods _add_triplets and _search_graph will now call the updated Mem0MemorySystem methods. The interpretation of results from _search_graph might need adjustment if it returns textual context instead of structured triplets.

# python/tools/memory_agent_tool.py
# ... (imports and __init__ as in Task 18/27)

class MemoryAgentTool(Tool):
    # ... (__init__, _emit_memory_event, execute, _add_from_messages, _add_generic_memory, _search_memory, _update_memory, _delete_memory, _get_all_memories)

    async def _add_triplets(self, triplets: List[Dict[str, Any]], user_id_for_op: Optional[str]) -> ToolResponse:
        await self._emit_memory_event("add_triplets", "starting", {"triplet_count": len(triplets), "user_id": user_id_for_op})
        # This now converts triplets to text and adds to mem0's general memory
        result = await self.memory_system.add_knowledge_graph_triplets(triplets, user_id_override=user_id_for_op)
        status = "completed" if result.get("status") == "success" and result.get("triplets_added", 0) > 0 else "failed_or_empty"
        await self._emit_memory_event("add_triplets", status, {**result, "user_id": user_id_for_op})
        return ToolResponse(message=f"Add KG triplet statements to mem0 {status}. Processed: {result.get('triplets_added', 0)}", data=result)

    async def _search_graph(self, query_entity: Optional[str], relation_type: Optional[str], 
                            target_entity: Optional[str], user_id_for_op: Optional[str], limit: int) -> ToolResponse:
        query_details = {"entity": query_entity, "relation": relation_type, "target": target_entity, "limit": limit, "user_id": user_id_for_op}
        await self._emit_memory_event("search_graph", "processing", query_details)
        # This now performs a semantic search on mem0 with a natural language query derived from graph components
        results = await self.memory_system.search_knowledge_graph(
            query_entity, relation_type, target_entity, user_id_override=user_id_for_op, limit=limit
        )
        # Results are textual snippets potentially containing graph info
        await self._emit_memory_event("search_graph", "completed", {"query": query_details, "results_count": len(results)})
        return ToolResponse(message=f"Graph-like semantic search returned {len(results)} text snippets.", data=results)
    
    # _summarize_memory calls self.memory_system.summarize_memory_content, which is updated.
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Python
IGNORE_WHEN_COPYING_END

Dependencies/Prerequisites:

Task 48 (Core mem0 integration for add/search).

mem0 library installed.

OPENAI_API_KEY and potentially other mem0 configurations are set.

Integration with Agent Zero:

If mem0 has distinct graph APIs, this task integrates them.

More likely (as implemented above): This task adapts the "graph" concept to mem0's text-centric approach. "Adding triplets" means adding textual statements about relationships. "Searching graph" means performing a semantic search with a natural language query that implies a relational structure.

This approach relies on mem0's underlying LLM intelligence to process and understand these relational statements from text.

The placeholder networkx graph is removed from Mem0MemorySystem.

Chatterbox TTS Integration Requirements for this Task:

None directly.

Docker Compatibility:

No new Python package dependencies beyond mem0 and its own requirements.

Summary of Task 50:
This task refines the graph-related actions of the MemoryAgentTool. Assuming mem0 primarily builds its knowledge graph implicitly from textual data, this implementation converts explicit graph triplets into natural language statements for ingestion via mem0.add(). Graph searches are similarly translated into natural language queries for mem0.search(). This leverages mem0's existing text processing and semantic search capabilities to simulate graph operations. If direct graph APIs become available in mem0's Python client, these methods would be updated to use them. The local networkx simulation is removed, relying fully on mem0 for memory storage and structure.
Please confirm to proceed.